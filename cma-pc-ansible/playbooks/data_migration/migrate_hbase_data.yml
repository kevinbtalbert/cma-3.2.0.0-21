# Copyright (c) 2023, Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---

- name: Prepare source cluster
  hosts: localhost
  gather_facts: false
  tags: hbase-migration-prereqs
  vars:
    hbase_home: "/user/{{ hbase_user }}"
  tasks:
    - name: Install HBase replication plugin parcel
      include_role:
        name: commons/install_parcel
      vars:
        local_parcel_path: "{{ hbase_repl_parcel_path }}"
        parcel_name: "{{ hbase_repl_parcel_name }}"
        parcel_version: "{{ hbase_repl_parcel_version }}"

    - name: Hdfs kinit
      include_role:
        name: cluster_discovery/cm_kinit
        apply:
          delegate_to: "{{ groups['cloudera_manager'][0] }}"
      vars:
        keytab_name: hdfs.keytab
        kinit_user: "{{ hdfs_user }}"
      when: is_kerberized_cluster

    - block:
        - name: Create hbase user folder
          shell: "hdfs dfs -mkdir -p {{ hbase_home }}"

        - name: Create hbase user folder
          shell: "hdfs dfs -chown {{ hbase_user }}:{{ hbase_user }} {{ hbase_home }}"
      delegate_to: "{{ groups['cloudera_manager'][0] }}"
      become: yes
      become_user: "{{ hdfs_user }}"

      # TODO check Allowed System Users  & Minimum User ID


- name: Setup host mapping
  gather_facts: false
  tags: hbase-migration-prereqs
  hosts: cluster
  roles:
    - commons/setup_host_mapping


- name: Create Replication policy for HBase migration using RM in Control Plane
  hosts: localhost
  tags: create-hbase-replication-policy
  vars:
    type_of_replication_policy_to_create: "hbase"
    policy_definitions: "{{ lookup('file', hbase_rm_policies_file_path) | from_json }}"
    submit_with_user: "{{ is_kerberized_cluster }}"
  roles:
    - determine_api_version
  tasks:
    - name: Fail if more than one hbase policy is specified
      fail:
        msg: "Please make sure that only one hbase policy is defined!"
      when: policy_definitions | length != 1

    - include_tasks: create_hbase_policy.yml
      loop: "{{ policy_definitions }}"
      loop_control:
        loop_var: policy_definition

- name: Restart Source HBase service
  tags: restart-source-hbase
  gather_facts: false
  hosts: localhost
  vars:
    policy_definitions: "{{ lookup('file', hbase_rm_policies_file_path) | from_json }}"
  tasks:
    - name: Fail if more than one hbase policy is specified
      fail:
        msg: "Please make sure that only one hbase policy is defined!"
      when: policy_definitions | length != 1

    - set_fact:
        hbase_policy_name: "{{ policy_definitions[0]['name'] }}"

    - name: Print hbase policy name
      debug:
        var: hbase_policy_name
      when: debug | default(False)

    - name: Wait until the hbase policy is not in WAITING_RESTART_ON_SRC state
      shell: cdp --profile {{ cdp_cli_profile_id }} replicationmanager list-policies
      register: policy_list
      retries: "{{ hbase_number_of_retries_to_check_policy_state | default(100) }}"
      delay: "{{ hbase_seconds_between_retries_to_check_policy_state | default(60) }}"
      until: policy_list.stdout | from_json | json_query(query_for_status) | first in ['WAITING_RESTART_ON_SRC', 'FAILED']
      failed_when: policy_list.stdout | from_json | json_query(query_for_status) | first in ['FAILED']
      vars:
        query_for_status: "policies[?name=='{{hbase_policy_name}}'].status"

    - name: Restart HBase service
      include_role:
        name: restart_service
      vars:
        service_name: "{{ hbase_service_name }}"
        skip_stopping_hdp_services: True

