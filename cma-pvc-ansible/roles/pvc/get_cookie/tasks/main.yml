# Copyright (c) 2023, Cloudera, Inc. All Rights Reserved.
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---

- set_fact:
    cloudera_manager_url: "{{ cloudera_manager_protocol }}://{{ cloudera_manager_host }}:{{ cloudera_manager_port }}"
  when: cloudera_manager_url is not defined

- set_fact:
    cloudera_manager_api_url: "{{ cloudera_manager_url }}/api/{{ cloudera_manager_api_version }}"

# Get cdp_endpoint_url

- name: Get All Control Planes
  uri:
    url: "{{ cloudera_manager_api_url }}/controlPlanes/"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: /tmp/controlplanes.json
  register: controlplanes

- set_fact:
    cp_dns_suffix: "{{ controlplanes.json | community.general.json_query(query) }}"
  vars:
    query: "items[?namespace == '{{ pvc_cluster_name }}' ].dnsSuffix | [0]"

- set_fact:
    cp_dns_suffix: "{{ pvc_ecs_server_host }}"
  when: pvc_type == 'ECS'

- name: DEBUG - cp_dns_suffix
  debug:
    msg: "{{ cp_dns_suffix }}"
  when: debug | default(false)

- set_fact:
    cdp_endpoint_url: "https://console-{{ pvc_cluster_name }}.apps.{{ cp_dns_suffix }}"

- set_fact:
    cdp_endpoint_url: "https://console-cdp.apps.{{ cp_dns_suffix }}"
  when: pvc_type == 'ECS'

- name: DEBUG - cdp_endpoint_url
  debug:
    msg: "{{ cdp_endpoint_url }}"
  when: debug | default(false)

- set_fact:
    pvc_api_call: "{{ cdp_endpoint_url }}/api/v1"

- name: DEBUG - pvc_api_call
  debug:
    msg: "{{ pvc_api_call }}"
  when: debug | default(false)

# ECS related
- name: Get Account ID (ECS)
  uri:
    url: "{{ cdp_endpoint_url }}/authenticate/login?loginRedirect={{ cdp_endpoint_url }}/commonconsole"
    method: GET
    status_code: [200, 302, 303]
    return_content: yes
    validate_certs: no
    body_format: json
    follow_redirects: no
  register: pvc_first_call_for_account_id
  when: pvc_type == 'ECS'

- set_fact:
    local_account_id: "{{ pvc_first_call_for_account_id.location.split('accountId=')[1].split('&')[0] }}" 
  when: pvc_type == 'ECS'

- name: DEBUG - local_account_id (ECS)
  debug:
    msg: "{{ local_account_id }}"
  when: pvc_type == 'ECS' and debug | default(false)

- set_fact:
    first_cookie: ""
  when: pvc_type == 'ECS'



# Open Shift related
- name: Get First Cookie
  uri:
    url: "{{ cdp_endpoint_url }}/"
    method: GET
    status_code: [200, 302]
    return_content: yes
    validate_certs: no
    body_format: json
    follow_redirects: no
  register: pvc_first_call
  when: pvc_type == 'OC'

- set_fact:
    first_cookie: "{{ pvc_first_call.set_cookie.split(';')[0] }};"
  when: pvc_type == 'OC'

- name: DEBUG - first_cookie
  debug:
    msg: "{{ first_cookie }}"
  when: pvc_type == 'OC' and debug | default(false)

- name: Get Local Account ID
  uri:
    url: "{{ cdp_endpoint_url }}/authenticate/login/local?loginRedirect={{ cdp_endpoint_url }}/commonconsole"
    method: GET
    headers: 
      Cookie: "{{ first_cookie }}"
    status_code: [200, 302, 303]
    return_content: yes
    validate_certs: no
    body_format: json
    follow_redirects: no
  register: pvc_call_for_accountid
  when: pvc_type == 'OC'

- set_fact:
    local_account_id: "{{ pvc_call_for_accountid.location.split('accountId=')[1].split('&')[0] }}" 
  when: pvc_type == 'OC'

- name: DEBUG - local_account_id
  debug:
    msg: "{{ local_account_id }}"
  when: pvc_type == 'OC' and debug | default(false)



# Common to ECS & OC to get auth cookie
- name: Get Authentication Cookie
  uri:
    url: "{{ cdp_endpoint_url }}/authenticate/callback/local?accountId={{ local_account_id }}&loginRedirect={{ cdp_endpoint_url }}/commonconsole"
    method: POST
    headers: 
      Cookie: "{{ first_cookie }}"
    body: "username=admin&password=admin"
    status_code: [200, 302, 303]
    return_content: yes
    validate_certs: no
    follow_redirects: no
  register: pvc_call_for_authcookie

- set_fact:
    auth_cookie: "{{ pvc_call_for_authcookie.set_cookie.split('cdp-pvt-session-token=')[1].split(';')[0] }};"

- name: DEBUG - auth_cookie
  debug:
    msg: "{{ auth_cookie }}"
  when: debug | default(false)

- set_fact:
    all_cookies: "{{ first_cookie }}cdp-pvt-session-token={{ auth_cookie }}"

- name: DEBUG - all_cookies
  debug:
    msg: "{{ all_cookies }}"
  when: debug | default(false)


# - name: Pvc Example API call
#   uri:
#     url: "{{ pvc_api_call }}/"
#     method: POST
#     headers: 
#       Content-TYpe: application/json
#       Cookie: "{{ all_cookies }}"
#     body: ""
#     status_code: 200
#     return_content: yes
#     validate_certs: no
#   register: pvc_example_call

# - name: DEBUG - pvc_example_call
#   debug:
#     msg: "{{ pvc_example_call }}"
#   when: debug | default(false)

