#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
- set_fact:
    dex_endpoint_api: "{{ cdp_endpoint_url }}/dex/api/v1"

- name: DEBUG - dex_endpoint_api
  debug:
    msg: "{{ dex_endpoint_api }}"

# Get CDE service id
- name: Get CDE Services
  uri:
    url: "{{ dex_endpoint_api }}/cluster"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_clusters

- set_fact:
    cde_service_id: "{{ cde_clusters.json | community.general.json_query(query) }}"
  vars:
    query: "[?name == '{{ virtual_cluster.cde_service_name }}' && status != 'ClusterDeletionCompleted' ].id | [0]"

- set_fact:
    dex_cde_is_existing: "{{ false if cde_service_id == '' else true }}"

- name: DEBUG - dex_cde_is_existing
  debug:
    msg: "{{ dex_cde_is_existing }}"
  when: debug | default(false)

- name: Fail if CDE service is not exist
  fail:
    msg: "CDE Service with name: {{ virtual_cluster.cde_service_name }} do not exist."
  when: not dex_cde_is_existing

# Create VC for created cde service

- name: Get CDE VCs
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_vcs

- set_fact:
    cde_vc_id: "{{ cde_vcs.json | community.general.json_query(query_id) }}"
  vars:
    query_id: "[?name == '{{ virtual_cluster.name }}'].id | [0]"

- set_fact:
    dex_vc_is_existing: "{{ false if cde_vc_id == '' else true }}"

- set_fact:
    create_vc_template: 'create_vc.json'

- set_fact:
    create_vc_template: 'create_vc_v1.4.1.json'
  when: pvc_version is version('1.4.1', '>=')

- set_fact:
    template_content: "{{ lookup('template', '{{ create_vc_template }}') }}"

- name: DEBUG - create_vc_template content
  debug:
    var: template_content
  when: debug | default(false)

- name: Wait 15 seconds before creating vc
  wait_for:
    timeout: 15
  when: not dex_vc_is_existing

- name: Create CDE VC
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance"
    method: POST
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: [200, 202]
    body_format: json
    body: "{{ lookup('template', '{{ create_vc_template }}') }}"
    return_content: yes
    validate_certs: no
  register: create_cde_vc
  changed_when: yes
  when: not dex_vc_is_existing

- set_fact:
    cde_vc_id: "{{ create_cde_vc.json.id }}"
  when: not dex_vc_is_existing

- name: Check CDE VC Activation
  uri:
    url: "{{ dex_endpoint_api }}/cluster/{{ cde_service_id }}/instance/{{ cde_vc_id }}"
    method: GET
    headers:
      Content-Type: application/json
      Accept: application/json
      Cookie: "{{ all_cookies }}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: cde_vc_activation
  until: " cde_vc_activation.json.status == 'AppInstalled' "
  retries: 50
  delay: 30
  when: not dex_vc_is_existing
